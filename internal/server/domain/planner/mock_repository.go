// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/oktavarium/doit-bot/internal/server/domain/planner (interfaces: PlannerRepository)

// Package planner is a generated GoMock package.
package planner

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPlannerRepository is a mock of PlannerRepository interface.
type MockPlannerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerRepositoryMockRecorder
}

// MockPlannerRepositoryMockRecorder is the mock recorder for MockPlannerRepository.
type MockPlannerRepositoryMockRecorder struct {
	mock *MockPlannerRepository
}

// NewMockPlannerRepository creates a new mock instance.
func NewMockPlannerRepository(ctrl *gomock.Controller) *MockPlannerRepository {
	mock := &MockPlannerRepository{ctrl: ctrl}
	mock.recorder = &MockPlannerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlannerRepository) EXPECT() *MockPlannerRepositoryMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockPlannerRepository) CreateList(arg0 context.Context, arg1 *List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateList indicates an expected call of CreateList.
func (mr *MockPlannerRepositoryMockRecorder) CreateList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockPlannerRepository)(nil).CreateList), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockPlannerRepository) CreateTask(arg0 context.Context, arg1 *Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockPlannerRepositoryMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockPlannerRepository)(nil).CreateTask), arg0, arg1)
}

// DeleteList mocks base method.
func (m *MockPlannerRepository) DeleteList(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockPlannerRepositoryMockRecorder) DeleteList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockPlannerRepository)(nil).DeleteList), arg0, arg1, arg2)
}

// DeleteTask mocks base method.
func (m *MockPlannerRepository) DeleteTask(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockPlannerRepositoryMockRecorder) DeleteTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockPlannerRepository)(nil).DeleteTask), arg0, arg1, arg2)
}

// GetList mocks base method.
func (m *MockPlannerRepository) GetList(arg0 context.Context, arg1, arg2 string) (*List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0, arg1, arg2)
	ret0, _ := ret[0].(*List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockPlannerRepositoryMockRecorder) GetList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockPlannerRepository)(nil).GetList), arg0, arg1, arg2)
}

// GetLists mocks base method.
func (m *MockPlannerRepository) GetLists(arg0 context.Context, arg1 string) ([]*List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLists", arg0, arg1)
	ret0, _ := ret[0].([]*List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLists indicates an expected call of GetLists.
func (mr *MockPlannerRepositoryMockRecorder) GetLists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLists", reflect.TypeOf((*MockPlannerRepository)(nil).GetLists), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockPlannerRepository) GetTask(arg0 context.Context, arg1, arg2 string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockPlannerRepositoryMockRecorder) GetTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockPlannerRepository)(nil).GetTask), arg0, arg1, arg2)
}

// GetTasks mocks base method.
func (m *MockPlannerRepository) GetTasks(arg0 context.Context, arg1 string) ([]*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", arg0, arg1)
	ret0, _ := ret[0].([]*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockPlannerRepositoryMockRecorder) GetTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockPlannerRepository)(nil).GetTasks), arg0, arg1)
}

// UpdateList mocks base method.
func (m *MockPlannerRepository) UpdateList(arg0 context.Context, arg1 *List) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockPlannerRepositoryMockRecorder) UpdateList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockPlannerRepository)(nil).UpdateList), arg0, arg1)
}

// UpdateTask mocks base method.
func (m *MockPlannerRepository) UpdateTask(arg0 context.Context, arg1 *Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockPlannerRepositoryMockRecorder) UpdateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockPlannerRepository)(nil).UpdateTask), arg0, arg1)
}
